package com.huanhong.content.model.plan;

import android.os.Handler;
import android.os.Looper;
import android.util.ArraySet;
import android.util.Log;

import com.zyn.lib.util.Utils;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;


public class TotalPlanManager
{
    private static String TAG = TotalPlanManager.class.getSimpleName();
    private List<TotalPlan> mTotalPlanList;
    private TotalPlan mTotalPlan;
    private TotalPlanListener mTotalPlanListener;
    private TimerTask mResetTimerTask, mEndTimerTask, mNextTimerTask;
    private Timer mResetTimer, mEndTimer, mNextTimer;
    private Handler mHandler;

    public TotalPlanManager(TotalPlanListener listener)
    {
        mTotalPlanListener = listener;
    }

    private void onNext()
    {
        Log.e(TAG, "onNext()");

        if (Utils.isEmptyList(mTotalPlanList))
        {
            Log.e(TAG, "异常: mTotalPlanList为空");
            playNull();
            return;
        }

        if (mTotalPlan == null)
        {
            mTotalPlan = getCurrTotalPlan();
        } else
        {
            mTotalPlan = getNextSchedule(mTotalPlan);
            if (mTotalPlan == null)
            {
                mTotalPlan = getCurrTotalPlan();
            }
        }

        if (mTotalPlan == null)
        {
            Log.e(TAG, "schedule为空");
            playNull();
            return;
        }

        long currTime = System.currentTimeMillis();
        long startTime = mTotalPlan.getStartTime();
        long endTime = mTotalPlan.getEndTime();
        Log.e(TAG, "当前计划:");
        Log.e(TAG, "当前时间:" + Utils.getStrTimestamp(currTime));
        Log.e(TAG, "开始时间:" + Utils.getStrTimestamp(startTime));
        Log.e(TAG, "结束时间:" + Utils.getStrTimestamp(endTime));

        //多种情况的判断
        if (startTime <= currTime)
        {
            play();
            TotalPlan next = getNextSchedule(mTotalPlan);
            if (next == null)
            {
                Log.e(TAG, "没有下一计划");
                runEndTimer(endTime);
            } else
            {
                long nextStartTime = next.getStartTime();
                if (nextStartTime > endTime)
                {
                    runEndTimer(endTime);
                }
                Log.e(TAG, "下一计划开始时间:" + Utils.getStrTimestamp(nextStartTime));
                runNextTimer(nextStartTime);
            }
        } else
        {
            mTotalPlan = null;
            Log.e(TAG, "当前没有计划，下一计划开始时间:" + Utils.getStrTimestamp(startTime));
            playNull();
            runNextTimer(startTime);
        }
    }

    private void runResetTimer()
    {
        if (mResetTimerTask != null)
        {
            mResetTimerTask.cancel();
        }
        mResetTimerTask = new TimerTask()
        {
            @Override
            public void run()
            {
                mHandler.post(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        stop();
                        start();
                    }
                });
            }
        };
        mResetTimer.schedule(mResetTimerTask, new Date(Utils.getNextDayTimestamp()));
        Log.e(TAG, "下次刷新计划时间:" + Utils.getStrTimestamp(Utils.getNextDayTimestamp()));
    }


    private void runNextTimer(long nextStartTime)
    {
        if (mNextTimerTask != null)
        {
            mNextTimerTask.cancel();
        }
        mNextTimerTask = new TimerTask()
        {
            @Override
            public void run()
            {
                mHandler.post(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        onNext();
                    }
                });
            }
        };
        mNextTimer.schedule(mNextTimerTask, new Date(nextStartTime));
    }

    private void runEndTimer(long endTime)
    {
        if (mEndTimerTask != null)
        {
            mEndTimerTask.cancel();
        }
        mEndTimerTask = new TimerTask()
        {
            @Override
            public void run()
            {
                mHandler.post(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        onEnd();
                    }
                });
            }
        };
        mEndTimer.schedule(mEndTimerTask, new Date(endTime));
    }

    private void onEnd()
    {
        Log.e(TAG, "onEnd()");
        playNull();
    }

    private void play()
    {
        if (mTotalPlan == null)
        {
            Log.e(TAG, "异常: 没有当前计划");
            playNull();
            return;
        }

        Plan plan = mTotalPlan.getPlan();
        if (plan == null)
        {
            Log.e(TAG, "异常: 没有plan");
            playNull();
        }

        play(plan);
    }

    private void play(Plan plan)
    {
        Log.e(TAG, "开始播放计划:" + mTotalPlan.getPlanName());
        if (mTotalPlanListener != null)
        {
            mTotalPlanListener.startPlan(plan);
        }
    }

    private void playNull()
    {
        if (mTotalPlanListener != null)
        {
            mTotalPlanListener.stopPlan();
        }
    }

    public void setTotalPlanList(List<TotalPlan> totalPlanList)
    {
        mTotalPlanList = totalPlanList;
    }

    private TotalPlan getCurrTotalPlan()
    {
        if (Utils.isEmptyList(mTotalPlanList))
        {
            return null;
        }

        for (TotalPlan totalPlan : mTotalPlanList)
        {
            long time = System.currentTimeMillis();
            long start = totalPlan.getStartTime();
            long end = totalPlan.getEndTime();

            //如果现在正在开始时间和结束时间之间或开始时间在之后
            if (time >= start && time <= end || start > time)
            {
                return totalPlan;
            }
        }
        return null;
    }

    private TotalPlan getNextSchedule(TotalPlan curr)
    {
        if (Utils.isEmptyList(mTotalPlanList))
        {
            return null;
        }

        int now = mTotalPlanList.indexOf(curr);
        if (now + 1 < mTotalPlanList.size())
        {
            return mTotalPlanList.get(now + 1);
        }
        return null;
    }

    public long getTimestamp(String time)
    {
        Date date = new Date(time);
        return date.getTime();
    }

    public void start()
    {
        //计时器
        mEndTimer = new Timer();
        mNextTimer = new Timer();
        mResetTimer = new Timer();

        // 主线程handler
        mHandler = new Handler(Looper.getMainLooper());

        //零点刷新
        runResetTimer();

        //开始执行
        onNext();
    }

    public void stop()
    {
        onEnd();

        if (mEndTimerTask != null)
        {
            mEndTimerTask.cancel();
            mEndTimerTask = null;
        }
        if (mEndTimer != null)
        {
            mEndTimer.cancel();
            mEndTimer = null;
        }
        if (mNextTimerTask != null)
        {
            mNextTimerTask.cancel();
            mNextTimerTask = null;
        }
        if (mNextTimer != null)
        {
            mNextTimer.cancel();
            mNextTimer = null;
        }
        if (mResetTimerTask != null)
        {
            mResetTimerTask.cancel();
            mResetTimerTask = null;
        }
        if (mResetTimer != null)
        {
            mResetTimer.cancel();
            mResetTimer = null;
        }

        mHandler = null;
        mTotalPlan = null;
    }

    public TotalPlanListener getTotalPlanListener()
    {
        return mTotalPlanListener;
    }

    public void setTotalPlanListener(TotalPlanListener totalPlanListener)
    {
        mTotalPlanListener = totalPlanListener;
    }

    public interface TotalPlanListener
    {
        void startPlan(Plan plan);

        void stopPlan();
    }
}
