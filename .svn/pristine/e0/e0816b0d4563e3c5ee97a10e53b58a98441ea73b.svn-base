package com.huanhong.content.presenter;


import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;

import com.huanhong.content.model.DownLoadModel;
import com.huanhong.content.model.info.ClientInfo;
import com.huanhong.content.model.info.HistoryInfo;
import com.huanhong.content.model.plan.Content;
import com.huanhong.content.model.plan.Schedule;
import com.huanhong.content.model.plan.TotalPlan;
import com.huanhong.content.model.plan.TotalSchedule;
import com.huanhong.content.model.sync.SyncHandler;
import com.huanhong.content.util.FileDownLoadUtil;
import com.huanhong.content.util.FileJsonUtil;
import com.huanhong.content.view.activity.MainActivity;
import com.huanhong.content.view.i.UpdateView;
import com.zyn.lib.presenter.BasePresenter;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class UpdatePresenter extends BasePresenter<UpdateView>
{
    public static final String TPYE = "type";
    public static final String TYPE_PLAN = "plan";
    public static final String TYPE_SYNC = "sync";
    public static final String DATA = "data";

    public UpdatePresenter(Context context, UpdateView view)
    {
        super(context, view);
        init();
    }


    private void init()
    {
        //开始同步
        ClientInfo
                .getInstance()
                .setSyncing(true);

        Intent intent = ((Activity) getContext()).getIntent();
        getView().startSyncAnim();
        if (intent != null)
        {
            String type = intent.getStringExtra(TPYE);
            if (type != null)
            {
                switch (type)
                {
                    case TYPE_PLAN:
                    {
                        checkAndPlay();
                    }
                    break;
                    case TYPE_SYNC:
                    {
                        String json = intent.getStringExtra(DATA);

                        getView().showMessage("开始同步文件...");
                        FileJsonUtil.compare(json, new FileDownLoadUtil.DownLoadCallback()
                        {
                            @Override
                            public void downLoadIng(int index, int size, int percent)
                            {
                                getView().showMessage("正在同步文件" + "(" + index + "/" + size + ")" + " 当前:" + percent + "%...");
                            }

                            @Override
                            public void downLoadStart()
                            {

                            }

                            @Override
                            public void downLoadComplete()
                            {

                            }

                            @Override
                            public void synchronizeComplete()
                            {
                                SyncHandler
                                        .getInstance()
                                        .response(true, true, "完成同步文件");
                                checkAndPlay();
                            }

                            @Override
                            public void error(String error)
                            {
                                SyncHandler
                                        .getInstance()
                                        .response(false, false, "同步文件异常");
                                checkAndPlay();
                            }

                        });
                    }
                    break;
                    default:
                    {
                        getView().showMessage("同步参数错误!");
                        checkAndPlay();
                    }
                }
            } else
            {
                checkAndPlay();
            }
        } else
        {
            checkAndPlay();
        }
    }

    private void checkAndPlay()
    {
        getView().showMessage("正在检查播放计划..");

        if (HistoryInfo.hasPlan())
        {
            List<DownLoadModel> downLoadModelList = new ArrayList<>();
            List<TotalPlan> totalPlanList = HistoryInfo.getPlanList();
            if (totalPlanList == null)
            {
                toMainActivity();
                return;
            }

            for (TotalPlan totalPlan : totalPlanList)
            {
                List<TotalSchedule> totalScheduleList = null;
                try
                {
                    totalScheduleList = totalPlan
                            .getPlan()
                            .getTotalSchedule();
                } catch (Exception e)
                {
                    e.printStackTrace();
                }
                if (totalScheduleList != null)
                {
                    for (TotalSchedule totalSchedule : totalScheduleList)
                    {
                        List<Schedule> scheduleList = totalSchedule.getSchedule();
                        if (scheduleList != null)
                        {
                            for (Schedule schedule : scheduleList)
                            {
                                List<Content> contentList = schedule.getContentList();
                                if (contentList != null)
                                {
                                    for (Content content : contentList)
                                    {
                                        DownLoadModel downLoadModel = new DownLoadModel(content);
                                        downLoadModelList.add(downLoadModel);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            FileJsonUtil.DownLoadFiles(downLoadModelList, new FileDownLoadUtil.DownLoadCallback()
            {
                @Override
                public void downLoadIng(int index, int size, int percent)
                {
                    getView().showMessage("正在同步文件" + "(" + index + "/" + size + ")" + " 当前:" + percent + "%...");
                }

                @Override
                public void downLoadStart()
                {

                }

                @Override
                public void downLoadComplete()
                {

                }

                @Override
                public void synchronizeComplete()
                {
                    toMainActivity();
                }

                @Override
                public void error(String error)
                {
                    getView().showMessage("检查播放计划失败，无法播放计划");
                    ClientInfo.getInstance().setSyncing(false);
                }
            });
        } else
        {
            toMainActivity();
        }
    }

    private void toMainActivity()
    {
        //结束同步
        ClientInfo
                .getInstance()
                .setSyncing(false);
        getView().showMessage("正在准备播放...");
        Handler handler = new Handler();
        handler.postDelayed(new Runnable()
        {
            @Override
            public void run()
            {
                getContext().startActivity(new Intent(getContext(), MainActivity.class));
                ((Activity) getContext()).finish();
            }
        }, 2 * 1000);
    }

    public void checkPlan()
    {

    }

    @Override
    public void onDestory()
    {
        super.onDestory();
        ClientInfo
                .getInstance()
                .setSyncing(false);
    }

    public interface OnUpdateListener extends Serializable
    {
        void onFinish();

        void onError();
    }
}
